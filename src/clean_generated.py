"""
Wipes all files and folders generated by the replication package so users can start from a clean slate.

Default behaviour:
- Recursively deletes each target path if it exists.
- Recreates the empty directory (and writes a .gitkeep) so Git keeps the structure.

Flags:
  --dry-run       Show what would be removed without deleting anything.
  --no-recreate   Do not recreate empty directories (nothing is created after deletion).
  --verbose       Print extra info.

Usage examples:
  python src/clean_generated.py
  python src/clean_generated.py --dry-run
  python src/clean_generated.py --no-recreate --verbose
"""

from __future__ import annotations
import argparse
import shutil
from pathlib import Path
import sys


def log(msg: str, verbose: bool):
    if verbose:
        print(msg)


def ensure_directory(path: Path, verbose: bool):
    path.mkdir(parents=True, exist_ok=True)
    gitkeep = path / ".gitkeep"
    try:
        gitkeep.write_text("")
        log(f"  created: {gitkeep}", verbose)
    except Exception as e:
        log(f"  warn: could not create {gitkeep}: {e}", verbose)


def remove_path(target: Path, dry_run: bool, verbose: bool):
    if not target.exists():
        log(f"- skip (missing): {target}", verbose)
        return

    if target.is_file():
        if dry_run:
            print(f"- would remove file: {target}")
        else:
            try:
                target.unlink()
                log(f"- removed file:  {target}", verbose)
            except Exception as e:
                print(f"! failed to remove file {target}: {e}", file=sys.stderr)
        return

    if dry_run:
        print(f"- would remove tree: {target}")
        try:
            entries = list(target.rglob("*"))
            preview = entries[:10]
            for p in preview:
                print(f"    - {p}")
            if len(entries) > len(preview):
                print(f"    ... (+{len(entries) - len(preview)} more)")
        except Exception:
            pass
    else:
        try:
            shutil.rmtree(target)
            log(f"- removed tree:  {target}", verbose)
        except Exception as e:
            print(f"! failed to remove tree {target}: {e}", file=sys.stderr)


def main():
    parser = argparse.ArgumentParser(description="Clean generated artifacts for a fresh run.")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be removed without deleting.")
    parser.add_argument("--no-recreate", action="store_true", help="Do not recreate empty directories (.gitkeep).")
    parser.add_argument("--verbose", action="store_true", help="Print detailed progress.")
    arguments = parser.parse_args()

    script_path = Path(__file__).resolve()
    repository_root = script_path.parent.parent

    targets = [
        repository_root / "results"
    ]

    print("Cleaning generated artifacts")
    if arguments.dry_run:
        print("DRY-RUN: no files will be deleted")

    for t in targets:
        remove_path(t, dry_run=arguments.dry_run, verbose=arguments.verbose)

    if not arguments.no_recreate:
        print("\n Recreating empty result folders (with .gitkeep)")
        for t in targets:
            if arguments.dry_run:
                print(f"- would recreate: {t} (.gitkeep)")
            else:
                ensure_directory(t, verbose=arguments.verbose)

    print("\nDone.")


if __name__ == "__main__":
    main()
